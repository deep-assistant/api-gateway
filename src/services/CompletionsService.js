import {llmsConfig, tryCompletionsConfig} from "../utils/llmsConfig.js";

export class CompletionsService {
    constructor(tokensService, tokensRepository) {
        this.tokensService = tokensService;
        this.tokensRepository = tokensRepository;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É
    processMessageContent(content) {
        if (typeof content === 'string') {
            return content;
        }
        if (Array.isArray(content)) {
            // –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            return content
                .filter(item => item.type === 'text')
                .map(item => item.text)
                .join('\n');
        }
        return '';
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    ensureCorrectMessageOrder(messages) {
        const result = [];
        let lastRole = null;

        for (const message of messages) {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (lastRole === null) {
                result.push(message);
                lastRole = message.role;
                continue;
            }

            // –ï—Å–ª–∏ —Ä–æ–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (message.role === lastRole) {
                if (lastRole === 'user') {
                    result.push({
                        role: 'assistant',
                        content: '–ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.'
                    });
                } else {
                    result.push({
                        role: 'user',
                        content: '–ü—Ä–æ–¥–æ–ª–∂–∞–π.'
                    });
                }
            }

            result.push(message);
            lastRole = message.role;
        }

        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (result.length > 0 && result[result.length - 1].role === 'assistant') {
            result.push({
                role: 'user',
                content: '–ü—Ä–æ–¥–æ–ª–∂–∞–π'
            });
        }

        return result;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    processDialogHistory(messages) {
        const processedMessages = [];
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –∏—Ö –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        for (const message of messages) {
            const content = this.processMessageContent(message.content);
            
            // –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            const lines = content.split('\n').filter(line => line.trim());
            
            let currentMessage = {
                role: message.role,
                content: []
            };

            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
            for (const line of lines) {
                // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–∏–ø–∏—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤)
                if (line.startsWith('**') || 
                    line.startsWith('–û—Ç–≤–µ—á–∞—é –∫–∞–∫') || 
                    line.startsWith('I\'ll answer as') ||
                    line.startsWith('–Ø –æ—Ç–≤–µ—á—É –∫–∞–∫')) {
                    
                    // –ï—Å–ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                    if (currentMessage.content.length > 0) {
                        processedMessages.push({
                            role: currentMessage.role,
                            content: currentMessage.content.join('\n')
                        });
                        currentMessage.content = [];
                    }
                    
                    // –ú–µ–Ω—è–µ–º —Ä–æ–ª—å –Ω–∞ assistant
                    currentMessage.role = 'assistant';
                    currentMessage.content.push(line);
                }
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                else if (line.endsWith('?') || 
                        line.toLowerCase().includes('—á—Ç–æ') || 
                        line.toLowerCase().includes('–∫–∞–∫') || 
                        line.toLowerCase().includes('–ø–æ—á–µ–º—É')) {
                    
                    // –ï—Å–ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                    if (currentMessage.content.length > 0) {
                        processedMessages.push({
                            role: currentMessage.role,
                            content: currentMessage.content.join('\n')
                        });
                        currentMessage.content = [];
                    }
                    
                    // –ú–µ–Ω—è–µ–º —Ä–æ–ª—å –Ω–∞ user
                    currentMessage.role = 'user';
                    currentMessage.content.push(line);
                }
                else {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                    currentMessage.content.push(line);
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤ –Ω–µ–º –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
            if (currentMessage.content.length > 0) {
                processedMessages.push({
                    role: currentMessage.role,
                    content: currentMessage.content.join('\n')
                });
            }
        }

        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return this.ensureCorrectMessageOrder(processedMessages);
    }

    async updateCompletionTokens(tokenId, energy, operation) {
        console.log('updateCompletionTokens', 'energy', energy);

	if (!energy) return false;

        console.log('updateCompletionTokens', 'operation', operation);

	if (operation !== "subtract" && operation !== "add") return false;

        const tokenBonus = await this.tokensRepository.getTokenByUserId("666");

	console.log('updateCompletionTokens', 'tokenBonus', tokenBonus);

	const currentBonusTokens = tokenBonus && +tokenBonus.tokens_gpt || 0;

        console.log('updateCompletionTokens', 'currentBonusTokens', currentBonusTokens);

        const token = currentBonusTokens > 100000 && operation === "subtract" ? tokenBonus : await this.tokensService.getTokenByUserId(tokenId);

	console.log('updateCompletionTokens', 'token', token);

        if (!token) return false;

        const oldEnergy = +token.tokens_gpt || 0;

	console.log('updateCompletionTokens', 'oldEnergy', oldEnergy);

	const energyToSpend = +energy || 0;

	console.log('updateCompletionTokens', 'energyToSpend', energyToSpend);

        const newEnergy = operation === "add" ? oldEnergy + energyToSpend : oldEnergy - energyToSpend;

	console.log('updateCompletionTokens', 'newEnergy', newEnergy);

	await this.tokensRepository.updateTokenByUserId(token.user_id, { tokens_gpt: newEnergy });

        return true;
    }

    async updateCompletionTokensByModel({ model, tokenId, tokens }) {
        console.log('updateCompletionTokensByModel', 'arguments', { model, tokenId, tokens });

	const convertationEnergy = llmsConfig[model].convertationEnergy;
	console.log('updateCompletionTokensByModel', 'convertationEnergy', convertationEnergy);

        let energy = Math.round(tokens / convertationEnergy);
	console.log('updateCompletionTokensByModel', 'energy before profit margin', energy);

	let defaultProfitMargin = 0.5;
        console.log('updateCompletionTokensByModel', 'profit margin', defaultProfitMargin);

	energy *= (1 + defaultProfitMargin);
	console.log('updateCompletionTokensByModel', 'energy after profit margin', energy);

	const token = await this.tokensRepository.getTokenById(tokenId);
	console.log('updateCompletionTokensByModel', 'token', token);

        await this.updateCompletionTokens(token.user_id, energy, "subtract");

        return energy;
    }

    async tryEndpoints(params, endpoints) {
        const errors = [];
        const requestId = Math.random().toString(36).substring(2, 15);
        
        console.log(`[${requestId}] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º –¥–ª—è –º–æ–¥–µ–ª–∏ ${params.model}`);
        console.log(`[${requestId}] üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:`, endpoints.map(endpoint => llmsConfig[endpoint]?.modelName || endpoint));
        
        for (let i = 0; i < endpoints.length; i++) {
            const endpoint = endpoints[i];
            const providerName = llmsConfig[endpoint]?.providerName || 'Unknown';
            const modelName = llmsConfig[endpoint]?.modelName || endpoint;
            
            console.log(`\n[${requestId}] üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${endpoints.length}: ${providerName} (${modelName})`);
            
            try {
                const lastMessage = params.messages[params.messages.length-1];
                const messagePreview = typeof lastMessage.content === 'string' 
                    ? lastMessage.content.substring(0, 100) + (lastMessage.content.length > 100 ? '...' : '')
                    : JSON.stringify(lastMessage.content).substring(0, 100) + '...';
                
                console.log(`[${requestId}] üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${messagePreview}"`);
                
                const completionEndpoint = llmsConfig[endpoint].endpoint;
                const model = llmsConfig[endpoint].modelName;
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è deepseek-reasoner
                let processedParams = {...params};
                if (model === 'deepseek-reasoner') {
                    processedParams.messages = this.processDialogHistory(params.messages);
                    console.log(`[${requestId}] üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è deepseek-reasoner`);
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
                console.log(`[${requestId}] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ${providerName}:`, {
                    provider: providerName,
                    model: modelName,
                    messagesCount: processedParams.messages.length,
                    stream: processedParams.stream,
                    timestamp: new Date().toISOString()
                });
                
                const startTime = Date.now();
                let response;
                
                try {
                    response = await completionEndpoint.chat.completions.create({
                        ...processedParams,
                        model
                    });
                    
                    const responseTime = Date.now() - startTime;
                    console.log(`[${requestId}] ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ${providerName} –∑–∞ ${responseTime}ms`);
                    
                } catch (err) {
                    const responseTime = Date.now() - startTime;
                    console.log(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç ${providerName} –∑–∞ ${responseTime}ms:`, err.message);
                    
                    // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
                    if (err.message.includes('429')) {
                        console.log(`[${requestId}] ‚ö†Ô∏è  –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429) —É ${providerName}`);
                    } else if (err.message.includes('401')) {
                        console.log(`[${requestId}] üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º (401) —É ${providerName}`);
                    } else if (err.message.includes('503')) {
                        console.log(`[${requestId}] üîß –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503) —É ${providerName}`);
                    } else if (err.message.includes('500')) {
                        console.log(`[${requestId}] üõ†Ô∏è  –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (500) —É ${providerName}`);
                    }
                    
                    throw err;
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç - –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –≤ JSON
                if (typeof response === 'string') {
                    try {
                        response = JSON.parse(response);
                        console.log(`[${requestId}] üîÑ –û—Ç–≤–µ—Ç –æ—Ç ${providerName} –±—ã–ª —Å—Ç—Ä–æ–∫–æ–π, —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω`);
                    } catch (e) {
                        console.log(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${providerName}:`, e.message);
                        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ${providerName}`);
                    }
                }

                // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                console.log(`[${requestId}] üì• –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${providerName}:`, {
                    provider: providerName,
                    model: response.model,
                    responseId: response.id,
                    hasUsage: !!response.usage,
                    totalTokens: response.usage?.total_tokens || 'N/A',
                    promptTokens: response.usage?.prompt_tokens || 'N/A',
                    completionTokens: response.usage?.completion_tokens || 'N/A',
                    hasChoices: !!response.choices,
                    choicesCount: response.choices?.length || 0,
                    finishReason: response.choices?.[0]?.finish_reason || 'N/A',
                    responseTime: `${Date.now() - startTime}ms`
                });

                if (response.choices?.[0]?.message?.content) {
                    const contentPreview = response.choices[0].message.content.substring(0, 150) + 
                        (response.choices[0].message.content.length > 150 ? '...' : '');
                    console.log(`[${requestId}] ü§ñ –û—Ç–≤–µ—Ç –ò–ò: "${contentPreview}"`);
                }

                console.log(`[${requestId}] üéâ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç ${providerName}`);
                return response;
                
            } catch (e) {
                const errorMsg = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ "${llmsConfig[endpoint]?.modelName || endpoint}": ${e.message}`;
                console.log(`[${requestId}] ‚ùå ${errorMsg}`);
                errors.push(errorMsg);
                
                if (e.response && e.response.data) {
                    console.log(`[${requestId}] üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç ${providerName}:`, JSON.stringify(e.response.data, null, 2));
                }
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π
        console.log(`\n[${requestId}] üí• –í—Å–µ ${endpoints.length} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:`);
        errors.forEach((error, index) => {
            console.log(`[${requestId}]   ${index + 1}. ${error}`);
        });
        
        throw new Error(`–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û—à–∏–±–∫–∏: ${errors.join('; ')}`);
    }

    async completions(params) {
        const requestId = Math.random().toString(36).substring(2, 15);
        const modelsChain = tryCompletionsConfig[params.model];

        console.log(`\n[${requestId}] üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ ${params.model}`);
        console.log(`[${requestId}] üîó –¶–µ–ø–æ—á–∫–∞ –º–æ–¥–µ–ª–µ–π:`, modelsChain || [params.model, `${params.model}_guo`, "gpt-auto"]);

        try {
            const result = await this.tryEndpoints(params, modelsChain || [params.model, `${params.model}_guo`, "gpt-auto"]);
            console.log(`[${requestId}] ‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥–µ–ª—å—é ${params.model}`);
            return result;
        } catch (error) {
            console.error(`[${requestId}] üí• –û—à–∏–±–∫–∞ –≤ completions –¥–ª—è –º–æ–¥–µ–ª–∏ ${params.model}:`, error.message);
            throw error;
        }
    }
}
